pipeline {
    agent any

    environment {
        REGISTRY = "docker.io/siddiqkesavansk"             // Docker registry
        IMAGE_NAME = "nginx"                               // Image name
        DOCKER_CREDENTIALS_ID = "dockerhub"               // Docker Hub creds
        KUBECONFIG_CREDENTIALS_ID = "kubeconfig"          // K8s kubeconfig creds
        NAMESPACE = "default"                              // Kubernetes namespace
        DEPLOYMENT_NAME = "angular-deployment"            // must match metadata.name in deployment.yaml
        CONTAINER_NAME = "myapp-container"                // Container name in YAML
        GIT_REPO = "https://github.com/Siddiqsk/nginx-_project-.git" // Git repo URL
        GIT_BRANCH = "main"                                // Git branch
    }

    stages {

        stage('Checkout from Git') {
            steps {
                git branch: env.GIT_BRANCH, url: env.GIT_REPO
                script {
                    GIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    IMAGE_TAG = "${GIT_SHORT}-${env.BUILD_NUMBER}"
                    IMAGE = "${env.REGISTRY}/${env.IMAGE_NAME}:${IMAGE_TAG}"
                    echo "Image will be: ${IMAGE}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        echo "Building Docker image from Dockerfile in repo..."
                        docker build -t ${IMAGE} -f Dockerfile .
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID,
                                                  usernameVariable: 'DOCKER_USER',
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin docker.io
                        docker push ${IMAGE}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: env.KUBECONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG_FILE')]) {
                    script {
                        sh """
                            export KUBECONFIG=\$KUBECONFIG_FILE

                            # Update the container image dynamically
                            kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${IMAGE}

                            # Wait for rollout to finish
                            kubectl rollout status deployment/${DEPLOYMENT_NAME} --timeout=120s
                        """
                    }
                }
            }
        }

    }
}
